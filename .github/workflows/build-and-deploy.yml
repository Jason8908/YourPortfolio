name: Build and deploy web app

on:
    push:
        # Only run this workflow if it is a commit to main.
        branches:
            - main
        # Only run this workflow if the commit has modified files from backend
        paths:
            - client/**
            - server/**
    workflow_dispatch:

env:
    FE_IMAGE_NAME: frontend-yourport
    BE_IMAGE_NAME: backend-yourport

jobs:
    # Push image to GitHub Packages.
    # See also https://docs.docker.com/docker-hub/builds/
    client:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: client

        steps:
            - uses: actions/checkout@v2

            - name: Build image
              run: docker build . --file Dockerfile --tag $FE_IMAGE_NAME

            - name: Log into GitHub Container Registry
              # TODO: Create a Personal Access Tokens (PAT) with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
              run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

            - name: Push image to GitHub Container Registry
              run: |
                  IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$FE_IMAGE_NAME
                  # Change all uppercase to lowercase
                  IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
                  # Strip git ref prefix from version
                  VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
                  # Strip "v" prefix from tag name
                  [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
                  # Use Docker `latest` tag convention
                  [ "$VERSION" == "main" ] && VERSION=latest
                  echo IMAGE_ID=$IMAGE_ID
                  echo VERSION=$VERSION
                  docker tag $FE_IMAGE_NAME $IMAGE_ID:$VERSION
                  docker push $IMAGE_ID:$VERSION

    server:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: server

        steps:
            - uses: actions/checkout@v2

            - name: Build image
              run: docker build . --file Dockerfile --tag $BE_IMAGE_NAME

            - name: Log into GitHub Container Registry
              # TODO: Create a Personal Access Tokens (PAT) with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
              run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

            - name: Push image to GitHub Container Registry
              run: |
                  IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$BE_IMAGE_NAME
                  # Change all uppercase to lowercase
                  IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
                  # Strip git ref prefix from version
                  VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
                  # Strip "v" prefix from tag name
                  [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
                  # Use Docker `latest` tag convention
                  [ "$VERSION" == "main" ] && VERSION=latest
                  echo IMAGE_ID=$IMAGE_ID
                  echo VERSION=$VERSION
                  docker tag $BE_IMAGE_NAME $IMAGE_ID:$VERSION
                  docker push $IMAGE_ID:$VERSION

    # deploy:
    #     needs: [backend, frontend]
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: executing remote ssh commands using password
    #           uses: appleboy/ssh-action@v1.0.3
    #           with:
    #               host: ${{ secrets.HOST }}
    #               username: ${{ secrets.USERNAME }}
    #               key: ${{ secrets.KEY }}
    #               port: ${{ secrets.PORT }}
    #               passphrase: ${{ secrets.PASSPHRASE }}
    #               script: docker compose pull && docker compose up -d
